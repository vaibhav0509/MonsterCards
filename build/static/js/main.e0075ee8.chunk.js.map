{"version":3,"sources":["components/card/card.components.jsx","components/card-list/card-list.components.jsx","components/searchbox/searchBox.components.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","width","height","name","email","CardList","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","bind","fetch","then","response","json","users","this","filteredMonster","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6TAGaA,G,YAAO,SAAAC,GAAK,OAErB,yBAAKC,UAAY,kBACb,yBAAKC,IAAM,WACXC,IAAG,+BAA4BH,EAAMI,QAAQC,GAA1C,aAAyDC,MAAQ,MAAMC,OAAO,QACjF,4BAAKP,EAAMI,QAAQI,MACdR,EAAMI,QAAQK,SCLdC,EAAW,SAAAV,GAExB,OAAO,yBAAKC,UAAY,aAEhBD,EAAMI,QAAQO,KAAI,SAAAP,GAAO,OAAI,kBAAC,EAAD,CAAMQ,IAAOR,EAAQC,GAAID,QAAWA,SCD5DS,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACrB,2BAAOd,UAAY,SAClBe,KAAO,SACRF,YAAeA,EACfG,SAAYF,MC0CDG,G,wDA7Cb,aAAc,IAAD,8BACX,gBAqBHH,aAAe,SAAAI,GACd,EAAKC,SAAS,CAACC,YAAcF,EAAEG,OAAOC,SArBpC,EAAKC,MAAQ,CACXpB,QAAU,GACViB,YAAa,IAIf,EAAKN,aAAe,EAAKA,aAAaU,KAAlB,gBART,E,gEAeM,IAAD,OAClBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAAChB,QAAU0B,S,+BAQhC,MAEyBC,KAAKP,MAA7BpB,EAFD,EAECA,QAASiB,EAFV,EAEUA,YAEVW,EAAkB5B,EAAQ6B,QAAO,SAAA7B,GAAO,OAAIA,EAAQI,KAAK0B,cAAcC,SAASd,EAAYa,kBAClG,OACE,yBAAKjC,UAAU,OACZ,wBAAII,GAAK,YAAT,kBAED,kBAAC,EAAD,CAAYS,YAAc,iBACzBC,aAAiBgB,KAAKhB,eAExB,kBAAC,EAAD,CAAUX,QAAW4B,S,GAvCVI,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e0075ee8.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nexport const Card = props => (\n    \n    <div className = 'card-container'>\n        <img alt = 'monsters' \n        src = {`https://robohash.org/${props.monster.id}?set=set2`} width = \"180\" height=\"180\" />\n        <h1>{props.monster.name}</h1>\n            {props.monster.email}\n\n               {/* names are received from card-list */}\n    </div> \n)","import React from 'react';\nimport  './card-list.styles.css';\nimport {Card} from '../card/card.components.jsx'\n\nexport const CardList = props =>{\n   \nreturn <div className = 'card-list'>\n    {   \n        props.monster.map(monster => <Card key = {monster.id} monster = {monster}/>) \n                                         // monster names are send to cards components \n    }\n</div>;\n}","import React from 'react';\n\nimport './searchBox.styles.css'\n\n\n\n// functional Component is made \nexport const SearchBox = ({placeholder,handleChange}) => (\n    <input className = 'search'\n     type = 'search' \n    placeholder = {placeholder} \n    onChange = {handleChange}\n    />\n)","import React,{Component} from 'react';\nimport {CardList} from  './components/card-list/card-list.components'\nimport {SearchBox} from  './components/searchbox/searchBox.components'\n// import logo from './logo.svg';\nimport './App.css';\n\n// class Component is made \nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {\n      monster : [],\n      searchField :''\n    };\n    \n\n    this.handleChange = this.handleChange.bind(this)\n    // by we bind this keyword of our method to the this keyword of JS\n    // but we don't want to do it as it for every new method we have to bind therefore we use ES6 arrow\n    // function which automatically bind it \n\n  } \n\n componentDidMount(){\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response => response.json())\n  .then(users => this.setState({monster : users}))\n\n } \n\n handleChange = e => {\n  this.setState({searchField : e.target.value, })\n }\n\n  render(){\n    //destructuring because we don't want to modify our base statez\n    const {monster, searchField} = this.state;\n    // filter() takes a function, include() checks if name is present in the array or not\n    const filteredMonster = monster.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    return (\n      <div className=\"App\">\n         <h1 id = 'header_1'>Monsters Cards</h1>\n        {/* SearchBox Component is made */}\n        <SearchBox  placeholder = 'search monster' \n         handleChange = { this.handleChange}/>\n        \n       <CardList monster = {filteredMonster} /> \n      </div>\n     \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}